(data_only_dirs src)

(dirs :standard \ target)

;; Ignore target if it exists locally

(rule
 (targets cargo-target-path)
 (action
  (with-stdout-to cargo-target-path
   (pipe-stdout
    (run cargo metadata)
    (run cargo_target_dir/cargo_target_dir.exe)))))

(rule
 (targets libwires_15_stubs.a)
 (deps
  Cargo.toml
  (source_tree src)
  (source_tree ../../proof-systems))
 (action
  (progn
   (setenv
    RUSTFLAGS
    "-C target-feature=+bmi2,+adx"
    (run cargo build --release))
   (run cp %{read:cargo-target-path}/release/libwires_15_stubs.a .))))

;; library

(library
 (public_name kimchi)
 (name kimchi)
 (foreign_archives wires_15_stubs)
 (c_library_flags :standard "-lpthread")
 (instrumentation
  (backend bisect_ppx))
 (inline_tests)
 (preprocess
  (pps ppx_version ppx_inline_test)))

;; generate the OCaml bindings

(rule
 (target kimchi.ml)
 (mode promote)
 (deps
  Cargo.toml
  ../../../../.ocamlformat
  (source_tree src)
  (source_tree binding_generation)
  (source_tree ../../proof-systems))
 (action
  (chdir
   binding_generation
   (progn
    (run rm -rf ./target)
    (run rm -f ./Cargo.lock)
    (run cargo run ../kimchi.ml)
    (run ocamlformat --impl -i ../kimchi.ml)))))
